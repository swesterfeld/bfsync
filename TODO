* use config file from repo, not hardcoded
* allow mv on directory
* detect protocol version
* cache friendly get would hash and copy file-by-file, since then the data
  is read only once from the physical media

==============================================================================================

BFSYNC2.1:

* don't use git
* linear commit history; a commit always has a parent
* commits are stored as regular sha-files
* commits contain diffs against previous commits
  - deleted files/dirs
  - new files/dirs with stat info

ENCRYPTED MODE:
* files are stored as continuous stream of encrypted data
* index is stored as pointers into file stream
* splitting (as 16M blocks) enables easy update
* passphrase-derived key
* sha-256 checksum for each block at the beginning
  -> partial writes become invisible
* store git upstream repo as encrypted contents in a git repository (file-by-file encryption)
* extract crypted repo before commit
* push changes
* reencrypt repo after commit

==============================================================================================

bfsync2 TODO:

* three-way merge
* use '' escaping for sql values
* work on in-memory objects, group updates for good transaction performance
* get rid of explicit save()
* fix redundant inserts (should be updates)
* possibly add id to links for easier deletion
* use 2-letter prefix for new files (new/6a/b755d1e8b23b0bebdbe0088cc95efa2c6408d7)

* write test: find -cnewer (ctime)
* config-file should allow ignoring repo uid/gid
* remote get
* remote put
* allow full history get/put
* speedup commit
* make get/put use temp dir (and remove stale temp dirs)
* check for open files before allowing readonly mode
