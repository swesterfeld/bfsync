* use config file from repo, not hardcoded
* allow mv on directory
* detect protocol version
* cache friendly get would hash and copy file-by-file, since then the data
  is read only once from the physical media

==============================================================================================

BFSYNC2.1:

* don't use git
* linear commit history; a commit always has a parent
* commits are stored as regular sha-files
* commits contain diffs against previous commits
  - deleted files/dirs
  - new files/dirs with stat info

ENCRYPTED MODE:
* files are stored as continuous stream of encrypted data
* index is stored as pointers into file stream
* splitting (as 16M blocks) enables easy update
* passphrase-derived key
* sha-256 checksum for each block at the beginning
  -> partial writes become invisible
* store git upstream repo as encrypted contents in a git repository (file-by-file encryption)
* extract crypted repo before commit
* push changes
* reencrypt repo after commit

==============================================================================================

bfsync2 TODO:

* config-file should allow ignoring repo uid/gid
* remote put
* speedup commit
* make get/put use temp dir (and remove stale temp dirs)
* check for open files before allowing readonly mode
* better cache expiring for INodeLinks
* background hashing for fs
* merge INodeLinks and INode cache

Performance:
============
* use Berkeley DB (with inode-affinity)
* fix redundant inserts (should be updates)
* use infinity as vmax, so that committing doesn't require an update
* change protocol: it should send a list of required objects, and
  send back the objects that are available on the remote host

MERGE:
======
* inode auto merging if only mtime/ctime changes
* support shell
* better name substitution: foo.gif => foo~1.gif
* better information for the user
  - change logs
  - inode values
