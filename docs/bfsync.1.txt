bfsync(1)
=========

NAME
----
bfsync - big file synchronization tool

SYNOPSIS
--------
[verse]
'bfsync' [--version] <command> <args>...

DESCRIPTION
-----------
*`bfsync`* is a file-synchronization tool which allows to keep a collection of
big files synchronized on many machines. There are two types of repositories:
master repositories and checkouts. Master repositories only contain the history
information. Usually they should be stored on a central server which all
computers that should view/edit this data can reach (at least some of the
time). Master repositories are created using linkbfsync:bfsync-init[1]. The
other repository type is a checkout. A checkout can be created using
linkbfsync:bfsync-clone[1]. Besides the history information checkouts contain
the actual file contents, so a checkout can be huge (houndreds of gigabytes)
whereas a master repository is usually small.

To view/edit the data in a checked out repository, the repository must be
mounted using linkbfsync:bfsyncfs[1]. Once mounted, `bfsync` can be called with
the commands given below. For instance `bfsync commit/push/pull` can be used to
modify the local history and resynchronize the history with the master history.
Other commands like `bfsync get/put` can be used to transfer data between
checkouts.

For transfer, `bfsync` needs to be installed on every system that needs to be
accessed. The actual transfer is done using ssh. Transfer has only be tested
with ssh keys; it's highly recommended to use `ssh-agent` to avoid entering
your password over and over again.

It is possible to use `bfsync` for backups, in that case you only use a subset
of what `bfsync` can do to get a versioned FUSE filesystem with deduplication.
See the section BACKUP WALKTHROUGH for a description.

OPTIONS
-------
For sub-commands like `bfsync pull` or `bfsync commit`, the options depend on
the command. In these cases, options are documented on the sub-command manual
page.

--version::
    If this option is used and no command is specified, bfsync prints out the
    current version.

COMMANDS
--------

Main Commands
~~~~~~~~~~~~~
include::cmds-main.txt[]

Additional Commands
~~~~~~~~~~~~~~~~~~~
include::cmds-add.txt[]

CONFIGURATION
-------------
Every bfsync checkout has a file called `"config"`, which can be used to set configuration variables for this checkout.

*use-uid-gid* 0|1::
    Bfsync was designed to store all file meta data, including the user id and
    group id of each file. These numbers will only make sense if all checkouts use
    the same uid/gid number to name mappings.
+
Since for most users we cannot assume that the uid/gid numbers are the same on
every system that has a checkout, bfsync defaults to ignoring the access
permissions and uid/gid numbers stored in the repository. All files will appear
to belong to the user that mounted the filesystem, and access rights will also
not be enforced.
+
To use the uid/gid numbers and enforce access rights, set use-uid-gid to 1.
This is for instance useful if you want to copy data into the repository as
root and preserve the ownership of the files.

*get-rate-limit* <get-limit-kb>::
    Set the maximum transfer rate in kilobytes/sec that `bfsync get` will use.
    This is helpful if your internet connection has a limited speed: that way
    you can ensure that bfsync will not use up your line completely.

*put-rate-limit* <put-limit-kb>::
    Set the maximum transfer rate in kilobytes/sec that `bfsync put` will use.

*default { get* "<url>|<path>"; *}*::
    Set default location for get (an <url> or <path>) to be used if `bfsync
    get` is called without an argument.

*default { put* "<url>|<path>"; *}*::
    Set default location for put (an <url> or <path>) to be used if `bfsync
    put` is called without an argument.

*default { pull* "<url>|<path>"; *}*::
    Set default location for pull (an <url> or <path>) to be used if `bfsync
    pull` is called without an argument.

*default { push* "<url>|<path>"; *}*::
    Set default location for push (an <url> or <path>) to be used if `bfsync
    push` is called without an argument.

*default { copy-expire* "<url>|<path>"; *}*::
    Set default location for copy-expire (an <url> or <path>) to be used if
    `bfsync copy-expire` is called without an argument.

The configuration keys in the *default group* can be set simultaneously, by using

----
default {
  get "...";
  put "...";
  push "...";
  pull "...";
  ...
}
----

*expire { keep-most-recent* <N>; *}*::
    Keep <N> most recent versions during expire.

*expire { create-daily* first|last; *}*::
    Tag first/last backup of the day as daily backup during expire.

*expire { keep-daily* <N>; *}*::
    Keep the newest <N> daily backups during expire.

*expire { create-weekly* <weekday>; *}*::
    Tag daily backup on <weekday> as weekly backup during expire. Possible values for <weekday> are monday, tuesday, ..., sunday.

*expire { keep-weekly* <N>; *}*::
    Keep the newest <N> weekly backups during expire.

*expire { create-monthly* first|last; *}*::
    Tag first/last daily backup of the month as monthly backup during expire.

*expire { keep-monthly* <N>; *}*::
    Keep the newest <N> monthly backups during expire.

*expire { create-yearly* first|last; *}*::
    Tag first/last daily backup of the year as yearly backup during expire.

*expire { keep-yearly* <N>; *}*::
    Keep the newest <N> yearly backups during expire.

The configuration keys in the *expire group* can be set simultaneously, for instance by using

----
expire {
  keep-most-recent 30;
  keep-daily 45;
  keep-monthly 30;
  ...
}
----

*sql-export { database* <database>; *}*::
    Use the postgres database <database> for the sql-export command.

*sql-export { user* <user>; *}*::
    Use the postgres user <user> for the sql-export command.

*sql-export { password* <password>; *}*::
    Use the postgres password <password> for the sql-export command.

*sql-export { host* <host>; *}*::
    Use the postgres host <host> for the sql-export command.

*sql-export { port* <port>; *}*::
    Use the postgres port <port> for the sql-export command.

The configuration keys in the *sql-export group* can be set simultaneously, for instance by using

----
sql-export {
  database bfsync;
  user postgres;
  password secret;
  ...
}
----

SHARED MEMORY CONFIGURATION
---------------------------

Shared memory is used by bfsync to access the Berkeley DB database contents
from different processes: the bfsync FUSE filesystem process, `bfsyncfs`, and the
python frontend, `bfsync`. Under Linux, the amount of shared memory usually is
limited by three system-wide kernel parameters:

*/proc/sys/kernel/shmall*::
    The maximum amount of shared memory that can be allocated.

*/proc/sys/kernel/shmmax*::
    The maximum size of a shared memory segment.

*/proc/sys/kernel/shmmni*::
    The maximum number of shared memory segments.

These limits need to be large enough to allow bfsync to allocate the required
amount of shared memory. The amount of shared memory required mainly depends on
the cache size. Bfsync will use somewhat more shared memory than the cache
size, but setting the limits too high is usually not a problem.

Example: If you're using three bfsync filesystems with 256 MB cache per
filesystem, you can do so if *shmall* is 2 GB and *shmmax* is 512 MB.
*shmmni* is usually not an issue, because bfsync doesn't use may segments
(about 4 per filesystem).

To display your current limits, you can use:

----
# Display the system wide shared memory limits.
server:~$ ipcs -lm
----

To adjust shared memory settings at boot time, create a file called `/etc/sysctl.d/90-bfsync-shm.conf`:

----
# Shared memory settings for bfsync

# Maximum size of shared memory segment in bytes
# 512 MB
kernel.shmmax = 536870912

# Maximum total size of shared memory in pages (normally 4096 bytes)
# 2 GB
kernel.shmall = 524288
----

Note that if you have other programs that also need shared memory, you need to
coordinate the settings of all shared memory using programs. Its also not a
problem if your limits are too high, so if the system wide limit for
*shmall* is already 8 GB, there is no need to adjust it.

After creating this files, the settings will be loaded at boot time. To
activate the shared memory configuration without rebooting, you can use

----
# Load shared memory settings (as root).
server:~$ sysctl -p /etc/sysctl.d/90-bfsync-shm.conf
----

MERGES
------

bfsync allows independent modifications of the data/history contained in
different checkouts. Upon push, bfsync will check that the master history
doesn't contain new commits that are unknown to the local checkout. If two
clients modify the repository independently, the first client that uses bfsync
push will simply reintegrate its changes into the master history, and the new
master history will be this client's history.

However, if the second client tries a bfsync push, the push will be refused. To
resolve the situation, the second client can use linkbfsync:bfsync-pull[1].
Once it is detected that merging both histories is necessary, a merge algorithm
will be used. For non-conflicting changes, everything will be merged
automatically.

Non-conflicting changes could be:

*master history has new file F - client 2 has new file G*::
    After merging, both files will be present in the repository

*master history has new dir A, with new files in it - client 2 has new dir B, with new files in it*::
    After merging, both directories will be part of the repository

*master history has renamed file F to G - client 2 has renamed dir X to Y*::
    After merging, both renames will be done

*master history has new file X - client 2 has new file X*::
    In this case, one of the files will be renamed to `X~1`, since they were
    both independently added it is likely that the user wants to keep both
    files.

However, there are situations where the merge algorithm can't merge both
histories automatically:

*master history has edited file F - client 2 has edited file F*::
    In this case, bfsync pull will ask the user to resolve the situation; it is
    possible to keep the master version, or the local version or both.

*master history has edited file F - client 2 has deleted file F*::
    bfsync pull will ask the user in this case; it is possible to either keep
    the file with changes, or delete it.

In any case, after the merge decisions are made (if any), the merge algorithm
will use them to modify the local history so that it can be executed without
conflicts *after* the master history. After this step, the modified local
commits will be based on the master history. This means that then, `bfsync push`
will succeed, and the modified changes of client 2 can be pushed to the master
history.

Note that the master history is always linear, so the history branch that was
present before the merge algorithm was used will no longer be visible in the
history after the pull. The merged history will simply contain the old history
(before client 1 and client 2 made their changes), the changes made on client
1, an extra merge commit (if necessary to resolve merge issues), and the
*modified changes* of client 2.
