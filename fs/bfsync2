#!/usr/bin/env python

# bfsync: Big File synchronization based on Git

# Copyright (C) 2011 Stefan Westerfeld
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import subprocess
import hashlib
import pickle
import traceback
import time
import tempfile
import CfgParser
import HashCache
import StatusLine
import shutil
import argparse

from utils import mkdir_recursive
from TransferList import TransferList, TransferFile
from StatusLine import status_line
from HashCache import hash_cache

def find_bfsync_dir():
  old_cwd = os.getcwd()
  dir = old_cwd
  while True:
    try:
      test_dir = os.path.join (dir, ".bfsync")
      os.chdir (test_dir)
      os.chdir (old_cwd)
      return test_dir
    except:
      pass
    # try parent directory
    newdir = os.path.dirname (dir)
    if newdir == dir:
      # no more parent
      raise Exception ("can not find .bfsync directory")
    dir = newdir

def compute_size (filename):
  return os.stat (filename).st_size

def compute_mode (filename):
  return os.stat (filename).st_mode

def commit_msg_ok (filename):
  file = open (filename, "r")
  result = False
  for line in file:
    line = line.strip()
    if len (line):
      if line[0] == "#":
        pass
      else:
        result = True
  file.close()
  return result

def make_object_filename (hash):
  if len (hash) != 40:
    raise Exception ("bad hash %s (not len 40)" % hash)
  return hash[0:2] + "/" + hash[2:]

def validate_object (object_file, hash):
  try:
    os.stat (object_file)
    if hash_cache.compute_hash (object_file) == hash:
      return True
  except:
    pass
  return False

def cmd_commit():
  parser = argparse.ArgumentParser (prog='bfsync2 commit')
  parser.add_argument ('-m', help='set commit message')
  parser.add_argument ('repo_path', help='path to the repository')
  commit_args = parser.parse_args (args)

  os.chdir (commit_args.repo_path)
  bfsync_dir = find_bfsync_dir()
  bfsync_info = CfgParser.CfgParser ((bfsync_dir + "/info"),
  [
  ],
  [
    "repo-path",
    "mount-point"
  ])

  repo_path = bfsync_info.get ("repo-path")
  if len (repo_path) != 1:
    raise Exception ("bad repo path")
  repo_path = repo_path[0]

  mount_point = bfsync_info.get ("mount-point")
  if len (mount_point) != 1:
    raise Exception ("bad mount point")
  mount_point = mount_point[0]

  # chdir to repo_path to allow unmount
  os.chdir (repo_path)
  if subprocess.call (["fusermount", "-u", mount_point]) != 0:
    raise Exception ("umount failed")

  os.chdir (os.path.join (repo_path, "new"))
  file_list = []
  for dir, dirs, files in os.walk ("."):
    for file in files:
      file_list += [ os.path.join (dir, file) ]

  if len (file_list) == 0:
    raise Exception ("no changes to commit")

  hash_cache.hash_all (status_line, file_list)
  status_line.cleanup()

  (fd,name) = tempfile.mkstemp (prefix = "bfsync_commit_")
  f = os.fdopen (fd, "w")
  if commit_args.m:
    f.write (commit_args.m)
  f.write("\n")
  for filename in file_list:
    f.write ("# add %s\n" % filename)
  f.close()
  if not commit_args.m:
    os.system ("vim %s" % name)
  if not commit_msg_ok (name):
    raise Exception ("commit message is empty")

  # create entries in git/files for newly added files
  for filename in file_list:
    try:
      new_file = os.path.join (repo_path, "new", filename)
      hash = hash_cache.compute_hash (new_file)
      size = compute_size (new_file)
      mode = compute_mode (new_file)
    except Exception, ex:
      raise

    git_file = os.path.join (repo_path, "git/files", filename)
    mkdir_recursive (os.path.dirname (git_file))
    try:
      gf = open (git_file, "w")
      gf.write ("hash = %s\n" % hash)
      gf.write ("size = %d\n" % size)
      gf.write ("mode = %o\n" % mode)
      gf.close()
    except Exception, ex:
      raise
    os.chdir (os.path.join (repo_path, "git"))
    if subprocess.call (["git", "add", git_file]) != 0:
      raise Exception ("cannot git add file %s\n" % git_file)

  # commit changes to repo
  os.chdir (os.path.join (repo_path, "git"))
  if os.system ("git commit -a -F %s" % name) != 0:
    raise Exception ("git commit failed")

  # copy files into objects/ directory
  tl = TransferList()
  for filename in file_list:
    new_file = os.path.join (repo_path, "new", filename)
    hash = hash_cache.compute_hash (new_file)
    object_file = os.path.join (repo_path, "objects", make_object_filename (hash))
    if not validate_object (object_file, hash):
      mkdir_recursive (os.path.dirname (object_file))
      tl.add (TransferFile (new_file, object_file, os.path.getsize (new_file), 0444))
  status_line.set_op ("COPY")
  tl.copy_files()

  # remove files from new/ directory
  for filename in file_list:
    new_file = os.path.join (repo_path, "new", filename)
    os.remove (new_file)
  return

command = None
command_func = None
arg_iter = sys.argv[1:].__iter__()
args = []

for arg in arg_iter:
  commands = [
    ( "commit",         cmd_commit, 1),
  ]
  parse_ok = False
  if command == None:
    for c in commands:
      if c[0] == arg:
        command_func = c[1]
        command_args = c[2]
        command = c[0]
        parse_ok = True
  else:
    if command_args > 0:
      args += [ arg ]
      parse_ok = True
  if not parse_ok:
    sys.stderr.write ("can't parse command line args...\n")
    sys.exit (1)

if command_func != None:
  try:
    command_func()
  except Exception, ex:
    print "\n\n"
    print "=================================================="
    traceback.print_exc()
    print "=================================================="
    print "\n\n"
    hash_cache.save()
    sys.stderr.write ("bfsync2: %s\n" % ex)
    sys.exit (1)
  hash_cache.save()
else:
  print "usage: bfsync <command> [ args... ]"
