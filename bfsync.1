.TH "BFSYNC" "1" "2011\-08\-23" "Revision 613" "bfsync Manual Page"

.SH NAME

bfsync - manage git-like repository with big files

.SH SYNOPSIS

\fBbfsync\fR \fI<command>\fR \fI<args>...\fR

.SH DESCRIPTION

\fBbfsync\fR is a program that provides git-style revision control for collections of big files. The
contents of the files are managed by bfsync, and a git repository is used to do version control; in
this repo only the hashes of the actual data files are stored.

For transfer, bfsync needs to be installed on every system that needs to be accessed. The actual transfer
is done using ssh. Transfer has only be tested with ssh keys; its highly recommended to use ssh-agent to
avoid entering your password over and over again.

.SH OPTIONS

\fBbfsync\fR has a number of commands, the options depend on the command.

.SH COMMANDS
.TP
\fBclone\fR \fI<repo>\fR
Initialize new cloned bfsync repo from git repo \fI<repo>\fR; its \fBhighly recommended\fR to always work with a bare git main repo (git init --bare).
.PP
.TP
\fBadd\fR \fI<file>...\fR
Add files to the bfsync repository
.PP
.TP
\fBcommit\fR
Commit changes to the repository
.PP
.TP
\fBpush\fR
Push changes to upstream repository
.PP
.TP
\fBpull\fR
Pull changes from upstream repository
.PP
.TP
\fBget\fR \fI<dir>|<remote dir>...\fR
Transfer file contents from directory - usually the directory should contain a bfsync checkout of the repository you're working with. However, it is possible to get data from any directory (local or remote), and as long as required hash values are found, it doesn't matter where the data comes from. A path with a ":" is interpreted as remote path, a path without ":" is a local path. Examples for remote paths are stefan@server:/big/files or server:some/dir
.PP
.TP
\fBput\fR \fI<remote repo>\fR
Transfer file contents from local directory to remote repo.
.PP
.TP
\fBcheck\fR
Checks local repository - ideally, all files that are known to the git index of the repository should be found and their hash values should match the values in the git repo. If thats not the case, put/get can be used to complete the local repository.
.PP
.TP
\fBmv\fR \fI<src_file>\fR \fI<dest_file>\fR
Use this for renaming a file - in the local repo, the data is automatically adapted, but for remote repositories, you'll need to use get/put to get the data right, and delete to delete the old file.
.PP
.TP
\fBrm\fR \fI<file>...\fR
Remove a file form the repository. On the local checkout the data file is removed automatically; however on remote hosts, using \fBbfsync delete\fR is required to remove the file.
.PP
.TP
\fBdelete\fR
This will check for files that are present locally, but not known to the index git repo. This can occur if you create new files, or if remote renames have been done. Since bfsync cannot distinguish these two cases, you'll have to confirm the delete list or abort if files that you have newly created are on that list.
.PP
.TP
\fBrepo-files\fR [-0|--null] \fI<dir>\fR
This searches a directory for files that are also in the repo. If you start moving data to the repo, you can clean up copies that might be present elsewhere. Using -0|--null makes the output suitable for use with xargs -0.
.PP
.TP
\fBstatus\fR
Show status information about files in repo.
.PP

.SH WALKTHROUGH

First, we create and setup repositories on three computers: server, client1 and client2. The server will hold the main repository (a git bare repository containing hashes of files); this repo is the canonical index which files are checked into the repository. It is stored under ~/repos/big.git. All computers will contain a checkout, so that the actual contents of the files can be kept there.
.TP
\fBserver:~$ mkdir -p repos/big.git\fR
Create a directory on the server for the main git index repository.
.PP
.TP
\fBserver:~$ cd repos/big.git\fR
Change dir.
.PP
.TP
\fBserver:~/repos/big.git$ git init --bare\fR
Init git repo.
.PP
.TP
\fBserver:~/repos/big.git$ cd ~\fR
Change dir.
.PP
.TP
\fBserver:~$ bfsync clone repos/big.git\fR
Clone repository on the server.
.PP
.TP
\fBclient1:~$ bfsync clone server:repos/big.git\fR
Clone repository on client1.
.PP
.TP
\fBclient2:~$ bfsync clone server:repos/big.git\fR
Clone repository on client2.
.PP

As second step, we add a music file on client1. Of course its possible to add more files in one step, either by passing more than one filename to bfsync add, or by calling bfsync add more than once. Whenever files are added or otherwise changed, we need to commit and push the changes to the server, so that it contains the canonical index of files.
.TP
\fBclient1:~$ cd big\fR
Change dir.
.PP
.TP
\fBclient1:~/big$ cp ~/download/01-some-music.flac .\fR
Copy a big file into the repository checkout
.PP
.TP
\fBclient1:~/big$ bfsync add 01-some-music.flac\fR
Add the file to the repository.
.PP
.TP
\fBclient1:~/big$ bfsync commit\fR
Commit the changes to the repository.
.PP
.TP
\fBclient1:~/big$ bfsync push\fR
Push the changes to the server.
.PP

So far, we have added the file to the repository on client1, but the contents of the file are only present on client1, and not in the other repos. To change this, we can transfer the file to the server.
.TP
\fBserver:~$ cd big\fR
Change directory.
.PP
.TP
\fBserver:~/big$ bfsync pull\fR
Updating the git index repository is required on the server before we can transfer the file there. By pulling, the server will have the necessary information, or in other words: the server can know that a file named 01-some-music.flac is part of the bfsync repository and \fIshould\fR be there. Running \fBbfsync check\fR will report one missing file after this step.
.PP
.TP
\fBclient1:~/big$ bfsync put server:big\fR
Now the actual transfer: after this step, both client1 and server will have a copy of \fI01-some-music.flac\fR.
.PP

As last step, we'll transfer the file to client2. Of course we could use the same commands that we used to get the file to the server, but let's assume that client2 is behind a firewall, and that its not possible to ssh to client2 directly. Fortunately, besides uploading files to another host (\fBbfsync put\fR), its also possible to download data from another host (\fBbfsync get\fR).
.TP
\fBclient2:~$ cd big\fR
Change directory
.PP
.TP
\fBclient2:~/big$ bfsync pull\fR
Update directory information.
.PP
.TP
\fBclient2:~/big$ bfsync get server:big\fR
Get the file form the server.
.PP

.SH SEE ALSO

git.1 <http://testbit.eu/index.php?title=Git.1&action=edit&redlink=1>,
rsync.1 <http://testbit.eu/index.php?title=Rsync.1&action=edit&redlink=1>

